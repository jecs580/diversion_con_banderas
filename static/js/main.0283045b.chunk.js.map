{"version":3,"sources":["country.js","country-list.js","App.js","serviceWorker.js","index.js"],"names":["CountryStyled","styled","div","Country","flag","name","population","region","capital","loading","src","alt","className","CountryListStyled","CountryList","useState","countryList","setCountryList","useEffect","fetch","then","res","json","data","console","log","catch","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"k2BAGA,IAAMA,EAAgBC,IAAOC,IAAV,KAqDJC,MArBf,YAA+D,IAA5CC,EAA2C,EAA3CA,KAAMC,EAAqC,EAArCA,KAAMC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,QACjD,OACE,kBAACR,EAAD,KAEE,yBAAKS,QAAQ,OAAOC,IAAKN,EAAMO,IAAI,KACnC,yBAAKC,UAAU,WACb,4BAAKP,GACL,2BACE,6CADF,IAC4BC,GAE5B,2BACE,yCADF,IACwBC,GAExB,2BACE,0CADF,IACyBC,M,sOC9CjC,IAAMK,EAAkBZ,IAAOC,IAAR,KA8CRY,MArCf,WAAwB,IAAD,EACgBC,mBAAS,IADzB,mBACZC,EADY,KACAC,EADA,KAgBnB,OAbAC,qBAAU,WACNC,MAAM,wCACLC,MAAK,SAACC,GACH,OAAOA,EAAIC,UAEdF,MAAK,SAACG,GACHN,EAAeM,GACfC,QAAQC,IAAIF,MAEfG,OAAM,WACHF,QAAQC,IAAI,8BAElB,IAEE,kBAACZ,EAAD,KAEQG,EAAYW,KAAI,YAA0C,IAAxCvB,EAAuC,EAAvCA,KAAKC,EAAkC,EAAlCA,KAAKC,EAA6B,EAA7BA,WAAWC,EAAkB,EAAlBA,OAAOC,EAAW,EAAXA,QAC1C,OACI,kBAAC,EAAD,CACAJ,KAAMA,EACNC,KAAMA,EACNC,WAAYA,EACZC,OAAQA,EACRC,QAASA,EACToB,IAAKvB,S,MC1BdwB,MATf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,QCKckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.0283045b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CountryStyled = styled.div`\r\n  width: 264px;\r\n  text-align: left;\r\n  box-shadow: 0 0 7px 2px rgba(0,0,0,0.03);\r\n  border-radius:5px;\r\n  overflow:hidden;\r\n  img {\r\n    width: 100%;\r\n    height: 160px;\r\n    object-fit: cover;\r\n  }\r\n  .details {\r\n    padding:1.2em 1.5em;\r\n    padding-bottom:2.5em;\r\n  }\r\n  h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n    font-size: 18px;\r\n    font-weight:700;\r\n  }\r\n  p {\r\n    span{\r\n      font-weight:600;\r\n      color:black;\r\n    }\r\n    font-weight:300;\r\n    font-size: 0.85em;\r\n    margin: 0.4rem 0;\r\n  }\r\n`;\r\n\r\nfunction Country({ flag, name, population, region, capital }) {\r\n  return (\r\n    <CountryStyled>\r\n      {/* loading=\"lazi\":Atributo de html que sirve para hacer una peticion de ese atributo a medida que vas haciendo scroll, por defecto carga una cantidad peque√±a de datos.Ojo para que esto puedas verlo debes tener desabilitado la cache del browser*/}\r\n      <img loading=\"lazy\" src={flag} alt=\"\" />\r\n      <div className=\"details\">\r\n        <h2>{name}</h2>\r\n        <p>\r\n          <span>Population:</span> {population}\r\n        </p>\r\n        <p>\r\n          <span>Region:</span> {region}\r\n        </p>\r\n        <p>\r\n          <span>Capital:</span> {capital}\r\n        </p>\r\n      </div>\r\n    </CountryStyled>\r\n  );\r\n}\r\n\r\nexport default Country;\r\n","import React,{useEffect ,useState} from \"react\";\r\nimport styled from 'styled-components'\r\nimport Country from './country';\r\nconst CountryListStyled=styled.div`\r\n    display:grid;\r\n    grid-row-gap:2.3em;\r\n    background:var(--background);\r\n    border: 1px solid red;\r\n    justify-content:center;\r\n    padding: 4em 2em;\r\n`\r\n\r\nfunction CountryList() {\r\n    const [countryList,setCountryList]=useState([]);\r\n    // hook --> useEffect\r\n    useEffect(()=>{\r\n        fetch('https://restcountries.eu/rest/v2/all')\r\n        .then((res)=>{\r\n            return res.json();\r\n        })\r\n        .then((data)=>{\r\n            setCountryList(data)\r\n            console.log(data);\r\n        })\r\n        .catch(()=>{\r\n            console.log(\"Ops, Ocurrio un error\");\r\n        })\r\n    },[])\r\n    return (\r\n        <CountryListStyled>\r\n            {\r\n                countryList.map(({flag,name,population,region,capital})=>{\r\n                    return (\r\n                        <Country\r\n                        flag={flag}\r\n                        name={name}\r\n                        population={population}\r\n                        region={region}\r\n                        capital={capital}\r\n                        key={name}/>\r\n                    )\r\n                })\r\n            }\r\n           \r\n           \r\n        </CountryListStyled>\r\n    )\r\n}\r\n\r\nexport default CountryList\r\n","import React from \"react\";\nimport CountryList from \"./country-list\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CountryList\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}