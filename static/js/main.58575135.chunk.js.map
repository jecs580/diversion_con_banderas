{"version":3,"sources":["country.js","input.js","country-list.js","Region.js","App.js","reducer.js","serviceWorker.js","index.js"],"names":["CountryStyled","styled","div","Country","flag","name","population","region","capital","loading","src","alt","className","InputStyled","label","Input","props","class","type","CountryListStyled","CountryList","useState","inputValue","setInputValue","dispatch","useDispatch","countryListByName","useSelector","state","countryList","filterByRegion","countryFilteredByRegion","length","console","log","useEffect","fetch","then","res","json","list","payload","catch","placeholder","value","onChange","e","target","onClick","map","key","Region","selectEvent","regionSelected","store","createStore","action","filter","country","toLowerCase","includes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.58575135.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst CountryStyled = styled.div`\r\n  width: 264px;\r\n  text-align: left;\r\n  box-shadow: 0 0 7px 2px rgba(0,0,0,0.03);\r\n  border-radius:5px;\r\n  margin:auto;\r\n  overflow:hidden;\r\n  img {\r\n    width: 100%;\r\n    height: 160px;\r\n    object-fit: cover;\r\n  }\r\n  .details {\r\n    padding:1.2em 1.5em;\r\n    padding-bottom:2.5em;\r\n  }\r\n  h2 {\r\n    margin: 0;\r\n    margin-bottom: 1rem;\r\n    font-size: 18px;\r\n    font-weight:700;\r\n  }\r\n  p {\r\n    span{\r\n      font-weight:600;\r\n      color:black;\r\n    }\r\n    font-weight:300;\r\n    font-size: 0.85em;\r\n    margin: 0.4rem 0;\r\n  }\r\n`;\r\n\r\nfunction Country({ flag, name, population, region, capital }) {\r\n  return (\r\n    <CountryStyled>\r\n      {/* loading=\"lazi\":Atributo de html que sirve para hacer una peticion de ese atributo a medida que vas haciendo scroll, por defecto carga una cantidad peque√±a de datos.Ojo para que esto puedas verlo debes tener desabilitado la cache del browser*/}\r\n      <img loading=\"lazy\" src={flag} alt=\"\" />\r\n      <div className=\"details\">\r\n        <h2>{name}</h2>\r\n        <p>\r\n          <span>Population:</span> {population}\r\n        </p>\r\n        <p>\r\n          <span>Region:</span> {region}\r\n        </p>\r\n        <p>\r\n          <span>Capital:</span> {capital}\r\n        </p>\r\n      </div>\r\n    </CountryStyled>\r\n  );\r\n}\r\n\r\nexport default Country;\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nconst InputStyled=styled.label`\r\ndisplay:flex;\r\nbackground:white;\r\nalign-items:center;\r\nbox-shadow:0 2px 9px 0 rgba(0,0,0,0.05);\r\npadding: 0 2rem;\r\nborder-radius:5px;\r\ni{\r\n    margin-right:1.5em;\r\n    color:#c4c4c4;\r\n}\r\ninput{\r\n    border:none;\r\n    height:48px;\r\n    line-height:48px;\r\n    box-sizing:border-box;\r\n    outline:0mm; /* Propiedad que coloca un linea fuera del border del elemento, para los inputs ya viene por defecto uno.*/\r\n    font-size:12px;\r\n    &::-webkit-input-placeholder{\r\n        color:#c4c4c4;\r\n        font-weight:300;\r\n    }\r\n}\r\n`\r\n\r\nfunction Input({...props}) {\r\n    return (\r\n        <InputStyled>\r\n            <i class=\"fas fa-search\"></i>\r\n            <input type=\"text\" {...props}/>\r\n        </InputStyled>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","import React,{useEffect ,useState} from \"react\";\r\nimport styled from 'styled-components'\r\nimport Country from './country';\r\nimport Input from './input'\r\nimport {useSelector, useDispatch} from 'react-redux'\r\nconst CountryListStyled=styled.div`\r\n    display:grid;\r\n    grid-row-gap:2.3em;\r\n    background:var(--background);\r\n    border: 1px solid red;\r\n    justify-content:center;\r\n    padding: 4em 2em;\r\n    grid-template-columns :1fr;\r\n`\r\n\r\nfunction CountryList() {\r\n    const [inputValue, setInputValue]=useState('')\r\n    const dispatch =useDispatch()\r\n    const countryListByName= useSelector((state)=> state.countryListByName)\r\n    const countryList=useSelector((state)=>{\r\n        if('' !== state.filterByRegion){\r\n            return state.countryFilteredByRegion\r\n        }\r\n        if(countryListByName.length> 0){\r\n            return countryListByName\r\n        }\r\n        return state.countryList\r\n    })\r\n    console.log('El estado total de mi app es:',countryList);\r\n    // hook --> useEffect\r\n    useEffect(()=>{\r\n        fetch('https://restcountries.eu/rest/v2/all')\r\n        .then((res)=>{\r\n            return res.json();\r\n        })\r\n        .then((list)=>{\r\n            dispatch({\r\n                type:'SET_COUNTRY_LIST',\r\n                payload:list\r\n            })\r\n            console.log(list.length);\r\n        })\r\n        .catch(()=>{\r\n            console.log(\"Ops, Ocurrio un error\");\r\n        })\r\n    },[])\r\n    const filterByName=(e)=>{\r\n        setInputValue(e.target.value)\r\n        dispatch({\r\n            type:'SET_COUNTRY_BY_NAME',\r\n            payload:e.target.value\r\n        })\r\n    }\r\n    const clearInput=()=>{\r\n        dispatch({\r\n            type:'SET_COUNTRY_BY_NAME',\r\n            payload:''\r\n        })\r\n        setInputValue('')\r\n    }\r\n    return (\r\n        <CountryListStyled>\r\n            <Input placeholder=\"Serch for a country...\" value={inputValue} onChange={filterByName}/>\r\n            {\r\n                inputValue && <button onClick={clearInput}>X</button>\r\n            }\r\n            {\r\n                countryListByName.length===0 && inputValue && <p><strong>{inputValue}</strong> no se encuetra en los paises</p>\r\n            }\r\n            {\r\n                countryList.map(({flag,name,population,region,capital})=>{\r\n                    return (\r\n                        <Country\r\n                        flag={flag}\r\n                        name={name}\r\n                        population={population}\r\n                        region={region}\r\n                        capital={capital}\r\n                        key={name}/>\r\n                    )\r\n                })\r\n            }\r\n           \r\n           \r\n        </CountryListStyled>\r\n    )\r\n}\r\n\r\nexport default CountryList\r\n","import React from 'react'\r\nimport {useDispatch,useSelector} from 'react-redux'\r\n\r\nconst filterByRegionAction=(regionSelected)=>{\r\n    return{\r\n        type:'FILTER_BY_REGION',\r\n        payload:{regionSelected}\r\n    }\r\n}\r\nfunction Region() {\r\n    const dispatch=useDispatch()\r\n    const filterByRegion=useSelector((state)=>state.filterByRegion)\r\n    const onRegionChange=(selectEvent)=>{\r\n        const value=selectEvent.target.value;\r\n        dispatch(filterByRegionAction(value))\r\n    }\r\n    return (\r\n        <select onChange={onRegionChange} value={filterByRegion}>\r\n            <option value=\"\">Filter by region</option>\r\n            <option value=\"Africa\">Africa</option>\r\n            <option value=\"Americas\">Americas</option>\r\n            <option value=\"Asia\">Asia</option>\r\n            <option value=\"Europe\">Europe</option>\r\n            <option value=\"Oceania\">Oceania</option>\r\n        </select>\r\n    )\r\n}\r\n\r\nexport default Region\r\n","import React from \"react\";\nimport CountryList from \"./country-list\";\nimport Region from './Region'\nimport \"./App.css\";\nimport {Provider} from 'react-redux'\nimport {createStore} from 'redux'\nimport reducer from './reducer'\nconst initialState={\n  countryList:[],\n  countryListByName:[],\n  countryFilteredByRegion:[],\n  filterByRegion:'',\n}\nconst store=createStore(reducer,initialState)\nfunction App() {\n  return (\n    <Provider store={store}>\n    <i class=\"far fa-moon\"></i>\n    <div className=\"App\">\n      <Region/>\n      <CountryList\n      />\n    </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","export default function reducer(state, action) {\r\n    console.log(action);\r\n    switch (action.type) {\r\n      case 'SET_COUNTRY_LIST':\r\n        console.log('Actualizando los datos');\r\n        return {...state, countryList: action.payload} // spredd operator\r\n      \r\n      case 'SET_COUNTRY_BY_NAME':\r\n        const countryListByName=(state.countryList || []).filter(country => country.name.toLowerCase().includes(action.payload.toLowerCase()))\r\n        return {...state, countryListByName}\r\n  \r\n      case 'FILTER_BY_REGION':\r\n        const {regionSelected}=action.payload\r\n        if(''=== regionSelected){\r\n          return {...state, countryFilteredByRegion:[],filterByRegion:''}\r\n        }\r\n        const countryFilteredByRegion=state.countryList.filter((country)=>country.region === regionSelected)\r\n        return {...state, countryFilteredByRegion,filterByRegion:regionSelected}\r\n      default:\r\n  \r\n        return state;\r\n    }\r\n  }\r\n  ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}